{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dans-datastation-tools \u00b6 Command line utilities for Data Station application management SYNOPSIS \u00b6 pip3 install dans-datastation-tools ds-help # list commands ds-update-datacite-record '10.17026/some-suffix' # etc DESCRIPTION \u00b6 This module contains a variety of command line scripts to facilitate DANS Data Station management. Each script comes with a command line help. INSTALLATION & CONFIGURATION \u00b6 Installation \u00b6 Globally: sudo pip3 install dans-datastation-tools For the current user: pip3 install --user dans-datastation-tools You may have to add the directory where pip3 installs the command on the PATH manually. Configuration \u00b6 The configuration file is called .dans-datastation-tools.yml . Each command starts by looking for this file in the current working directory and then in the user's home directory. If it is not found in either location it is instantiated with some default and placeholder values in the current directory. It is recommended that you move this file to your home directory. Using the configuration file from the current working directory is mainly useful for development. For the available configuration options and their meaning, see the explanatory comments in the configuration file itself.","title":"Manual"},{"location":"#dans-datastation-tools","text":"Command line utilities for Data Station application management","title":"dans-datastation-tools"},{"location":"#synopsis","text":"pip3 install dans-datastation-tools ds-help # list commands ds-update-datacite-record '10.17026/some-suffix' # etc","title":"SYNOPSIS"},{"location":"#description","text":"This module contains a variety of command line scripts to facilitate DANS Data Station management. Each script comes with a command line help.","title":"DESCRIPTION"},{"location":"#installation-configuration","text":"","title":"INSTALLATION &amp; CONFIGURATION"},{"location":"#installation","text":"Globally: sudo pip3 install dans-datastation-tools For the current user: pip3 install --user dans-datastation-tools You may have to add the directory where pip3 installs the command on the PATH manually.","title":"Installation"},{"location":"#configuration","text":"The configuration file is called .dans-datastation-tools.yml . Each command starts by looking for this file in the current working directory and then in the user's home directory. If it is not found in either location it is instantiated with some default and placeholder values in the current directory. It is recommended that you move this file to your home directory. Using the configuration file from the current working directory is mainly useful for development. For the available configuration options and their meaning, see the explanatory comments in the configuration file itself.","title":"Configuration"},{"location":"dev/","text":"Development \u00b6 This page contains information for developers about how to contribute to this project. Set-up \u00b6 The project uses poetry for a build system. It is recommended that you install everything, including poetry, in a virtual environment. git clone cd dans-datastation-tools python3 -m venv venv source venv/bin/activate python3 -m pip poetry poetry install Testing commands \u00b6 After poetry install the commands provided by the module can be tested by prepending poetry run to the command line, e.g.: poetry run update-datacite-record 10 .17026/some-suffix For more information about how to use poetry, see the poetry documentation. Debugging commands in IntelliJ \u00b6 There seems to be no special support for poetry with this respect. The only way to run a command in the debugger I have found is to just call the entry-point script under src/datastation/scripts . Warning Change the working directory of the run configuration to the project root directory, so that you don't end up with a .dans-datastation-tools.yml file inside the src/datastation/scripts directory. Adding to this documentation site \u00b6 Edit the markdown pages in the docs folder then run the site locally. In an active venv : pip3 install -r .github/workflows/mkdocs/requirements.txt # only once mkdocs serve Browse to http://127.0.0.1:8000 to view your changes. Coding style \u00b6 Except for input from configured APIs such as Dataverse and DataCite, prefer reading input from: The command line (for simple values) The standard input (for lists o) Write output to the standard output Write status messages (OK, Oops, ...) for the end user to the standard error Write all other information to the logs (at an appropriate level) Get all the configuration variables from the config dictionary in the main function and pass them to down to","title":"Development"},{"location":"dev/#development","text":"This page contains information for developers about how to contribute to this project.","title":"Development"},{"location":"dev/#set-up","text":"The project uses poetry for a build system. It is recommended that you install everything, including poetry, in a virtual environment. git clone cd dans-datastation-tools python3 -m venv venv source venv/bin/activate python3 -m pip poetry poetry install","title":"Set-up"},{"location":"dev/#testing-commands","text":"After poetry install the commands provided by the module can be tested by prepending poetry run to the command line, e.g.: poetry run update-datacite-record 10 .17026/some-suffix For more information about how to use poetry, see the poetry documentation.","title":"Testing commands"},{"location":"dev/#debugging-commands-in-intellij","text":"There seems to be no special support for poetry with this respect. The only way to run a command in the debugger I have found is to just call the entry-point script under src/datastation/scripts . Warning Change the working directory of the run configuration to the project root directory, so that you don't end up with a .dans-datastation-tools.yml file inside the src/datastation/scripts directory.","title":"Debugging commands in IntelliJ"},{"location":"dev/#adding-to-this-documentation-site","text":"Edit the markdown pages in the docs folder then run the site locally. In an active venv : pip3 install -r .github/workflows/mkdocs/requirements.txt # only once mkdocs serve Browse to http://127.0.0.1:8000 to view your changes.","title":"Adding to this documentation site"},{"location":"dev/#coding-style","text":"Except for input from configured APIs such as Dataverse and DataCite, prefer reading input from: The command line (for simple values) The standard input (for lists o) Write output to the standard output Write status messages (OK, Oops, ...) for the end user to the standard error Write all other information to the logs (at an appropriate level) Get all the configuration variables from the config dictionary in the main function and pass them to down to","title":"Coding style"}]}